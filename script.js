document.addEventListener('DOMContentLoaded', () => {
    const qrDataInput = document.getElementById('qrDataInput');
    const qrThemeSelector = document.getElementById('qrThemeSelector');
    const colorSwatches = document.querySelectorAll('.color-swatch');
    const surpriseMeBtn = document.getElementById('surpriseMeBtn');
    const qrCodeImage = document.getElementById('qrCodeImage');
    const qrCanvas = document.getElementById('qrCanvas');
    const qrWatermarkText = document.getElementById('qrWatermarkText');
    const downloadQrBtn = document.getElementById('downloadQrBtn');
    const getCleanQrBtn = document.getElementById('getCleanQrBtn'); // Renamed for clarity
    const createMyQRBtn = document.getElementById('createMyQRBtn'); // From Hero
    const chatWithCutieBtn = document.getElementById('chatWithCutieBtn'); // From Hero
    const chatBubble = document.getElementById('chatBubble'); // Chatbot bubble
    const chatPanel = document.getElementById('chatPanel'); // Chatbot panel
    const versionBubble = document.getElementById('versionBubble'); // Version bubble
    const versionModal = document.getElementById('versionModal'); // Version modal
    const closeVersionModal = document.getElementById('closeVersionModal'); // Close button for modal

    let currentColor = '255-157-228'; // Default Pink (RGB)
    let currentTheme = 'minimal'; // Default Minimal

    const qrTotalCounterKey = 'cutit_total_qrs_generated';
    let totalQRsGenerated = parseInt(localStorage.getItem(qrTotalCounterKey) || '0', 10);

    // Function to update total QR counter (example, might be displayed somewhere if needed)
    function updateTotalQRCounter() {
        // console.log(`Total QRs generated by you: ${totalQRsGenerated}`);
        // If there's a specific element to display this, update it here.
    }

    // Initial QR generation
    generateQRCode();
    updateTotalQRCounter();

    function generateQRCode(isPremium = false) {
        let data = qrDataInput.value;
        if (!data) {
            data = "https://cutit.sbs"; // Default URL if input is empty
            qrDataInput.value = data; // Set default in input field
        }

        const apiUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(data)}&size=320x320&color=${currentColor}`;

        qrCodeImage.src = apiUrl;
        qrCodeImage.onload = () => {
            if (!isPremium) {
                drawWatermarkedQR(qrCodeImage, qrCanvas, qrWatermarkText.textContent);
                qrCodeImage.style.display = 'none'; // Hide original image
                qrCanvas.style.display = 'block'; // Show canvas with watermark
            } else {
                // If premium, show the original image without watermark
                qrCanvas.style.display = 'none';
                qrCodeImage.style.display = 'block';
            }
        };

        // Increment counter only on actual QR generation attempts
        totalQRsGenerated++;
        localStorage.setItem(qrTotalCounterKey, totalQRsGenerated.toString());
        updateTotalQRCounter();
    }

    function drawWatermarkedQR(img, canvas, watermarkText) {
        const ctx = canvas.getContext('2d');
        canvas.width = img.naturalWidth;
        canvas.height = img.naturalHeight;

        ctx.drawImage(img, 0, 0);

        // Watermark styling
        ctx.font = "bold 18px 'Sora', sans-serif"; // Using Sora for watermark
        ctx.fillStyle = "rgba(34, 34, 34, 0.7)"; // Neutral Dark with opacity
        ctx.textAlign = "center";
        ctx.textBaseline = "alphabetic";

        // Calculate text width and position
        const textMeasurements = ctx.measureText(watermarkText);
        const textWidth = textMeasurements.width;
        const textHeight = parseInt(ctx.font.match(/\d+/)[0], 10); // Extract font size

        const paddingX = 10;
        const paddingY = 5;

        const rectX = (canvas.width / 2) - (textWidth / 2) - paddingX;
        const rectY = canvas.height - textHeight - paddingY;
        const rectWidth = textWidth + (paddingX * 2);
        const rectHeight = textHeight + (paddingY * 2);

        // Background rectangle for watermark
        ctx.fillStyle = "rgba(255, 255, 255, 0.7)"; // White with opacity
        ctx.fillRect(rectX, rectY, rectWidth, rectHeight);

        // Watermark text
        ctx.fillStyle = "rgba(34, 34, 34, 0.7)"; // Neutral Dark with opacity
        ctx.fillText(watermarkText, canvas.width / 2, canvas.height - paddingY);
    }

    qrDataInput.addEventListener('input', () => generateQRCode());
    qrThemeSelector.addEventListener('change', (e) => {
        currentTheme = e.target.value;
        generateQRCode(); // Re-generate on theme change (though theme doesn't affect QR image directly)
    });

    colorSwatches.forEach(swatch => {
        swatch.addEventListener('click', () => {
            colorSwatches.forEach(s => s.classList.remove('active'));
            swatch.classList.add('active');
            currentColor = swatch.dataset.color;
            generateQRCode();
        });
    });

    surpriseMeBtn.addEventListener('click', () => {
        const themes = ['minimal', 'y2k', 'anime-pastel', 'cyber-minimal', 'kpop-neon'];
        const colors = [
            '255-157-228', // Pink
            '34-34-34',    // Black (Neutral Dark)
            '167-184-255', // Lilac
            '0-0-255',     // Blue
            '0-128-0',     // Green
            '255-255-0',   // Yellow
            '255-165-0'    // Orange
        ];

        currentTheme = themes[Math.floor(Math.random() * themes.length)];
        currentColor = colors[Math.floor(Math.random() * colors.length)];

        // Update UI to reflect random choices
        qrThemeSelector.value = currentTheme;
        colorSwatches.forEach(s => s.classList.remove('active'));
        document.querySelector(`.color-swatch[data-color="${currentColor}"]`)?.classList.add('active');

        generateQRCode();
    });

    downloadQrBtn.addEventListener('click', () => {
        if (qrCanvas.style.display === 'block') { // If canvas (watermarked) is visible
            const link = document.createElement('a');
            link.download = 'cutit-qr-watermarked.png';
            link.href = qrCanvas.toDataURL('image/png');
            link.click();
        } else { // If original image (premium) is visible
            const link = document.createElement('a');
            link.download = 'cutit-qr-clean.png';
            link.href = qrCodeImage.src;
            link.click();
        }
    });

    // --- Hero Section Button Functionality ---
    createMyQRBtn.addEventListener('click', () => {
        // Scroll to the QR generator section
        document.querySelector('.qr-generator-section').scrollIntoView({
            behavior: 'smooth'
        });
    });

    chatWithCutieBtn.addEventListener('click', () => {
        chatPanel.classList.toggle('open');
        chatBubble.style.display = chatPanel.classList.contains('open') ? 'none' : 'flex';
    });

    // --- Version Bubble and Modal ---
    versionBubble.addEventListener('click', () => {
        versionModal.style.display = 'flex'; // Use flex to center with align-items/justify-content
    });

    closeVersionModal.addEventListener('click', () => {
        versionModal.style.display = 'none';
    });

    // Close modal if clicked outside content
    window.addEventListener('click', (event) => {
        if (event.target == versionModal) {
            versionModal.style.display = 'none';
        }
    });

    // Set a flag in localStorage if premium is paid.
    // This part will be interacted with by razorpay.js
    // For testing: localStorage.setItem('isPremiumPaid', 'true');
    // To reset: localStorage.removeItem('isPremiumPaid');

    // Check premium status on page load and update QR generation behavior
    function updateQrGenerationOnPremiumStatus() {
        const isPremiumPaid = localStorage.getItem('isPremiumPaid') === 'true';
        if (isPremiumPaid) {
            getCleanQrBtn.textContent = "You're Premium! ✨";
            getCleanQrBtn.disabled = true;
            qrWatermarkText.style.display = 'none'; // Hide watermark text element
            // Automatically regenerate current QR without watermark
            generateQRCode(true);
        } else {
            getCleanQrBtn.textContent = "₹1 Get Clean QR";
            getCleanQrBtn.disabled = false;
            qrWatermarkText.style.display = 'block'; // Show watermark text element
            generateQRCode(false); // Generate with watermark
        }
    }

    // Call this function initially and whenever premium status might change
    updateQrGenerationOnPremiumStatus();

    // Event listener for the "Get Clean QR" button on homepage (it will direct to premium page for now)
    getCleanQrBtn.addEventListener('click', () => {
        const isPremiumPaid = localStorage.getItem('isPremiumPaid') === 'true';
        if (!isPremiumPaid) {
            window.location.href = 'premium.html';
        }
        // If already paid, button is disabled and text is updated by updateQrGenerationOnPremiumStatus
    });
});
